Index: ccs_app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Import Python Libraries\r\nimport pandas as pd\r\nimport streamlit as st\r\nimport plotly.express as px\r\nfrom PIL import Image\r\n\r\nst.set_page_config(page_title=\"CCS America\", page_icon=\"sources/icons/logo.png\", layout=\"wide\")\r\nlogo = \"sources/icons/logo.png\"\r\n\r\nst.markdown(\r\n    \"\"\"\r\n    <h1 style='text-align: center;'>\uD83C\uDF0E CCS America </h1>\r\n    \"\"\",\r\n    unsafe_allow_html=True\r\n)\r\nst.markdown(\"---\")\r\n\r\nst.markdown(\r\n    \"\"\"\r\n    <style>\r\n    h1 {text-align: center;\r\n    }\r\n    \r\n    .stApp {background-color: #DCE3D5;\r\n            width: 1400px;\r\n            margin: 15px auto;\r\n    }\r\n    </style>\r\n    \"\"\",\r\n    unsafe_allow_html=True\r\n)\r\n\r\n# CSS codes to improve the design of the web app\r\nst.markdown(\r\n    \"\"\"\r\n<style>\r\nh1 {text-align: center;\r\n}\r\nbody {background-color: #DCE3D5;\r\n      width: 1400px;\r\n      margin: 15px auto;\r\n}\r\n</style>\"\"\",\r\n    unsafe_allow_html=True,\r\n)\r\n\r\nst.sidebar.title(\"\uD83D\uDCD1 Menú de Navegación\")\r\nsection = st.sidebar.radio(\r\n    \"Ir a:\",\r\n    [\"\uD83D\uDCCA CO₂ Emissions Volume\",\r\n     \"\uD83D\uDEE2\uFE0F Geological Storage Capacity\",\r\n     \"\uD83D\uDFE2 Carbon balance and emission removal\",\r\n     \"\uD83D\uDDFA\uFE0F Mapa interactivo de reservorios\"])\r\n\r\nif section == \"\uD83D\uDCCA CO₂ Emissions Volume\":\r\n    st.subheader(\"\uD83D\uDCCA CO₂ Emissions Volume\")\r\n    st.markdown(\"\"\"\r\n    Here you can explore the **total emissions volume** by country or region \r\n    for a defined year range. Use the filters below to select country, emission source, \r\n    and year range.\r\n    \"\"\")\r\n\r\n    df_emisiones = pd.read_csv(\"data/co2-by-source.csv\")\r\n    df_emisiones = df_emisiones.melt(\r\n        id_vars=[\"Entity\", \"Year\"],\r\n        value_vars=[\"Coal\", \"Oil\", \"Gas\", \"Flaring\", \"Cement\"],\r\n        var_name=\"Source\",\r\n        value_name=\"Emissions\"\r\n    )\r\n\r\n    df_emisiones[\"Emissions\"] = df_emisiones[\"Emissions\"] / 1e6\r\n    df_emisiones = df_emisiones.rename(columns={\"Emissions\": \"Emissions (Mt)\"})\r\n\r\n    # Filters\r\n    mode = st.radio(\"View emissions by:\", [\"Country\", \"Region\"])\r\n    sources = list(df_emisiones[\"Source\"].unique()) + [\"All\"]\r\n    source = st.selectbox(\"Select emission source:\", sources)\r\n\r\n    year_min = int(df_emisiones[\"Year\"].min())\r\n    year_max = int(df_emisiones[\"Year\"].max())\r\n    years = st.slider(\"Select year range:\", year_min, year_max, (year_min, year_max))\r\n\r\n    if mode == \"Country\":\r\n        st.markdown(\"### \uD83C\uDF0E Emissions by Country\")\r\n\r\n        countries = df_emisiones[\"Entity\"].dropna().unique()\r\n        country = st.selectbox(\"Select country:\", sorted(countries))\r\n\r\n        df_filtered = df_emisiones[\r\n            (df_emisiones[\"Entity\"] == country) &\r\n            (df_emisiones[\"Year\"] >= years[0]) &\r\n            (df_emisiones[\"Year\"] <= years[1])\r\n            ]\r\n\r\n        if source == \"All\":\r\n            df_filtered = df_filtered.groupby([\"Entity\", \"Year\"], as_index=False)[\"Emissions (Mt)\"].sum()\r\n            df_filtered[\"Source\"] = \"All\"\r\n            df_filtered = df_filtered[[\"Entity\", \"Year\", \"Source\", \"Emissions (Mt)\"]]\r\n        else:\r\n            df_filtered = df_filtered[df_filtered[\"Source\"] == source]\r\n            df_filtered = df_filtered[[\"Entity\", \"Year\", \"Source\", \"Emissions (Mt)\"]]\r\n\r\n        df_filtered[\"Year\"] = df_filtered[\"Year\"].astype(int)\r\n        total_country = df_filtered[\"Emissions (Mt)\"].sum()\r\n        st.subheader(f\"Emissions of {country} ({source}) between {years[0]} and {years[1]}\")\r\n\r\n        st.dataframe(\r\n            df_filtered.style.set_properties(**{'text-align': 'center'}), use_container_width=True)\r\n\r\n        st.metric(\r\n            label=f\"Total emissions of {country} ({source})\", value=f\"{round(total_country, 2)} Mt CO₂\")\r\n\r\n    elif mode == \"Region\":\r\n        st.markdown(\"### \uD83C\uDF0E Emissions by Region\")\r\n        regions = {\r\n            \"America\": [\r\n                \"United States\", \"Canada\", \"Mexico\",  # North America\r\n                \"Argentina\", \"Brazil\", \"Colombia\", \"Venezuela\", \"Ecuador\"  # South America\r\n            ],\r\n            \"North America\": [\"United States\", \"Canada\", \"Mexico\"],\r\n            \"South America\": [\"Argentina\", \"Brazil\", \"Colombia\", \"Venezuela\", \"Ecuador\"]\r\n        }\r\n        region = st.selectbox(\"Select region:\", list(regions.keys()))\r\n\r\n        df_region = df_emisiones[\r\n            (df_emisiones[\"Entity\"].isin(regions[region])) &\r\n            (df_emisiones[\"Year\"] >= years[0]) &\r\n            (df_emisiones[\"Year\"] <= years[1])\r\n            ]\r\n\r\n        if source == \"All\":\r\n            df_region = df_region.groupby([\"Year\"], as_index=False)[\"Emissions (Mt)\"].sum()\r\n            df_region[\"Source\"] = \"All\"\r\n        else:\r\n            df_region = df_region[df_region[\"Source\"] == source]\r\n            df_region = df_region.groupby([\"Year\"], as_index=False)[\"Emissions (Mt)\"].sum()\r\n            df_region[\"Source\"] = source\r\n\r\n        df_region = df_region[[\"Source\", \"Year\", \"Emissions (Mt)\"]]\r\n        df_region[\"Year\"] = df_region[\"Year\"].astype(int)\r\n\r\n        total_region = df_region[\"Emissions (Mt)\"].sum()\r\n\r\n        st.subheader(f\"Emissions of {region} ({source}) between {years[0]} and {years[1]}\")\r\n        st.dataframe(df_region.style.set_properties(**{'text-align': 'center'}), use_container_width=True)\r\n        st.metric(label=f\"Total emissions of {region} ({source})\", value=f\"{round(total_region, 2)} Mt CO₂\")\r\n\r\n    elif mode == \"Region\":\r\n        st.markdown(\"### \uD83C\uDF0E Emissions by Region\")\r\n        regions = {\r\n            \"America\": [\r\n                \"United States\", \"Canada\", \"Mexico\",  # North America\r\n                \"Argentina\", \"Brazil\", \"Colombia\", \"Venezuela\", \"Ecuador\"  # South America\r\n            ],\r\n            \"North America\": [\"United States\", \"Canada\", \"Mexico\"],\r\n            \"South America\": [\"Argentina\", \"Brazil\", \"Colombia\", \"Venezuela\", \"Ecuador\"]\r\n        }\r\n        region = st.selectbox(\"Select region:\", list(regions.keys()))\r\n\r\n        df_region = df_emisiones[\r\n            (df_emisiones[\"Entity\"].isin(regions[region])) &\r\n            (df_emisiones[\"Year\"] >= years[0]) &\r\n            (df_emisiones[\"Year\"] <= years[1])\r\n            ]\r\n\r\n        if source == \"All\":\r\n            df_region = df_region.groupby([\"Year\"], as_index=False)[\"Emissions (Mt)\"].sum()\r\n            df_region[\"Source\"] = \"All\"\r\n        else:\r\n            df_region = df_region[df_region[\"Source\"] == source]\r\n            df_region = df_region.groupby([\"Year\"], as_index=False)[\"Emissions (Mt)\"].sum()\r\n            df_region[\"Source\"] = source\r\n\r\n        df_region = df_region[[\"Source\", \"Year\", \"Emissions (Mt)\"]]\r\n        df_region[\"Year\"] = df_region[\"Year\"].astype(int)\r\n\r\n        total_region = df_region[\"Emissions (Mt)\"].sum()\r\n\r\n        st.subheader(f\"Emissions of {region} ({source}) between {years[0]} and {years[1]}\")\r\n        st.dataframe(df_region.style.set_properties(**{'text-align': 'center'}), use_container_width=True)\r\n        st.metric(label=f\"Total emissions of {region} ({source})\", value=f\"{round(total_region, 2)} Mt CO₂\")\r\n\r\nelif section == \"\uD83D\uDEE2\uFE0F Geological Storage Capacity\":\r\n    st.subheader(\"\uD83D\uDEE2\uFE0F Geological Storage Capacity\")\r\n    st.markdown(\"\"\"\r\n    Here you can explore the **CO₂ geological storage capacity**.  \r\n    First, select a **region**, then one or more **countries** from that region, and finally the **reservoirs**.\r\n    \"\"\")\r\n\r\n    df_reservoirs = pd.DataFrame({\r\n        \"Region\": [\r\n            \"North America\", \"North America\", \"North America\", \"North America\", \"North America\", \"North America\",\r\n            \"North America\", \"North America\",\r\n            \"North America\", \"North America\", \"North America\", \"North America\", \"North America\", \"North America\",\r\n            \"North America\",\r\n            \"North America\", \"North America\",\r\n            \"South America\", \"South America\", \"South America\",\r\n            \"South America\", \"South America\", \"South America\",\r\n            \"South America\", \"South America\", \"South America\", \"South America\", \"South America\"\r\n        ],\r\n        \"Country\": [\r\n            \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"Canada\",\r\n            \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\",\r\n            \"Mexico\", \"Mexico\",\r\n            \"Brazil\", \"Brazil\", \"Brazil\",\r\n            \"Colombia\", \"Colombia\", \"Colombia\",\r\n            \"Ecuador\", \"Ecuador\", \"Ecuador\", \"Ecuador\", \"Ecuador\"\r\n        ],\r\n        \"Reservoir\": [\r\n            \"Leduc Formation (Clive Field)\", \"Midale Formation (Weyburn Field)\", \"Viking Formation (Chigwell Field)\", \"Leduc Formation (Redwater Field)\", \"Viking Formation (Joffre Field)\", \"Cardium Formation (Pembina Field)\",\r\n            \"Basal Cambrian Sand (Quest)\", \"Deadwood Formation (Aquistore)\",\r\n            \"Frio Formation (West Ranch Field)\", \"Weber Sandstone (Rangely Field)\", \"Muddy Formation (Bell Creek Field)\", \"Morrow Formation (Farnsworth Field)\", \"Mt. Simon Sandstone (Illinois Basin)\", \"Tuscaloosa Formation (Cranfield Field)\",\r\n            \"Paluxy Formation (Citronelle Field)\",\r\n            \"Cahuasas Formation (Tampico Misantla Basin)\", \"Tamaulipas Formation (Tampico Misantla Basin)\",\r\n            \"Itapema Formation (Buzios Field)\", \"Barra Velha Formation (Buzios Field)\", \"Itapema Formation (Tupi Field)\",\r\n            \"Siamana Formation (Guajira Basin)\", \"Jimol Formation (Guajira Basin)\", \"Jimol Formation (Sinu Basin)\",\r\n            \"Hollín Superior (Sacha Field)\", \"Hollín Superior (Lago Agrio Field)\", \"U Inferior (Parahuacu Field)\", \"Napo T (Sacha Field)\", \"T Principal (Yanaquincha Este Field)\"\r\n        ],\r\n        \"Capacity (Mt)\": [\r\n            18.38, 125.13, 9.33, 79.33, 35.35, 861.54, 65.05, 67.06,\r\n            47.79, 95.45, 13.0, 28.1, 393.15, 109.52, 753.19,\r\n            823.39, 275.49,\r\n            814.48, 892.36, 940.03,\r\n            682.73, 359.42, 136.45,\r\n            58.73, 3.63, 2.56, 17.35, 5.41\r\n        ],\r\n        \"Depth (m)\": [\r\n            1832, 1450, 1385.6, 984, 1400, 1447, 2330, 3200,\r\n            1752.6, 1980, 1360, 2330, 3060, 1690, 2865,\r\n            3600, 2900,\r\n            5000, 5000, 5000,\r\n            1701, 1800, 3287,\r\n            2735.58, 3040.38, 2649, 2671.58, 3048\r\n        ],\r\n        \"Thickness (m)\": [\r\n            180, 20, 30, 250, 20, 32, 47, 38.6,\r\n            27, 58, 8, 25, 28, 156, 143,\r\n            400, 154,\r\n            121.92, 151, 121.92,\r\n            12, 37, 11,\r\n            15.24, 5.48, 12.92, 10.21, 27.74\r\n        ],\r\n        \"Porosity (%)\": [\r\n            8, 26, 13, 12, 13, 16.4, 17, 15,\r\n            30, 58, 25, 23, 25.5, 21, 25,\r\n            14, 9,\r\n            13, 11.5, 13,\r\n            17.5, 21, 24,\r\n            14, 13, 11.9, 16, 15\r\n        ],\r\n        \"Permeability (mD)\": [\r\n            95.02, 300, 72.89, 100, 349, 21.4, 1000, 20,\r\n            900, 8, 900, 300, 100, 28, 300,\r\n            100, 100,\r\n            88.7, 122.6, 88.7,\r\n            200, 250, 200,\r\n            70, 70.64, 384, 200, 356\r\n        ]\r\n    })\r\n\r\n    region = st.selectbox(\"\uD83C\uDF0E Select region:\", df_reservoirs[\"Region\"].unique())\r\n    df_region = df_reservoirs[df_reservoirs[\"Region\"] == region]\r\n    countries = st.multiselect(\"\uD83C\uDFF3\uFE0F Select country/countries:\", df_region[\"Country\"].unique())\r\n\r\n    if countries:\r\n        df_countries = df_region[df_region[\"Country\"].isin(countries)]\r\n        df_countries[\"Reservoir_Display\"] = df_countries[\"Country\"] + \" - \" + df_countries[\"Reservoir\"]\r\n        selected_display_reservoirs = st.multiselect(\r\n            \"\uD83D\uDEE2\uFE0F Select reservoir(s):\",\r\n            df_countries[\"Reservoir_Display\"].unique()\r\n        )\r\n\r\n        if selected_display_reservoirs:\r\n            df_selected = df_countries[df_countries[\"Reservoir_Display\"].isin(selected_display_reservoirs)]\r\n            st.subheader(\"\uD83D\uDEE2\uFE0F Selected Reservoir Data\")\r\n            st.dataframe(\r\n                df_selected[\r\n                    [\"Region\", \"Country\", \"Reservoir\", \"Capacity (Mt)\", \"Depth (m)\", \"Thickness (m)\", \"Porosity (%)\",\r\n                     \"Permeability (mD)\"]]\r\n                .style.format({\r\n                    \"Capacity (Mt)\": \"{:.2f}\",\r\n                    \"Depth (m)\": \"{:.2f}\",\r\n                    \"Thickness (m)\": \"{:.2f}\",\r\n                    \"Porosity (%)\": \"{:.2f}\",\r\n                    \"Permeability (mD)\": \"{:.2f}\"\r\n                }).set_properties(**{'text-align': 'center'}),\r\n                use_container_width=True\r\n            )\r\n\r\n            if len(selected_display_reservoirs) == 1:\r\n                st.metric(label=\"Selected reservoir capacity\",\r\n                          value=f\"{df_selected['Capacity (Mt)'].values[0]:.2f} Mt CO₂\")\r\n\r\n            st.metric(label=\"Total capacity of selected reservoir(s)\",\r\n                      value=f\"{df_selected['Capacity (Mt)'].sum():.2f} Mt CO₂\")\r\n            st.metric(label=f\"Total capacity in {region}\",\r\n                      value=f\"{df_region['Capacity (Mt)'].sum():.2f} Mt CO₂\")\r\n\r\n            fig = px.bar(df_selected, x=\"Reservoir\", y=\"Capacity (Mt)\",\r\n                         color=\"Country\", text=\"Capacity (Mt)\",\r\n                         title=f\"\uD83D\uDCCA Capacity per selected reservoir(s)\")\r\n            st.plotly_chart(fig, use_container_width=True)\r\n\r\nelif section == \"\uD83D\uDFE2 Carbon balance and emission removal\":\r\n    st.subheader(\"\uD83D\uDFE2 Carbon balance and emission removal\")\r\n    st.markdown(\"\"\"\r\n        Visualize the *carbon balance* and the *% of emission removal* at different levels:\r\n        - America\r\n        - North America\r\n        - South America\r\n        - Country\r\n    \"\"\")\r\n\r\n    df_balance = pd.DataFrame({\r\n        \"Region\": [\"North America\", \"North America\", \"North America\", \"South America\", \"South America\", \"South America\"],\r\n        \"Country\": [\"Canada\", \"USA\", \"Mexico\", \"Brazil\", \"Colombia\", \"Ecuador\"],\r\n        \"CO₂ emissions (Mt)\": [18354.93, 186820.53, 14502.65, 13050.66, 2477.66, 1038.67],\r\n        \"CO₂ stored (Mt)\": [1261.17, 1440.20, 1098.88, 2646.87, 1178.60, 87.68]\r\n    })\r\n\r\n    df_balance[\"CO₂ not stored (Mt)\"] = df_balance[\"CO₂ emissions (Mt)\"] - df_balance[\"CO₂ stored (Mt)\"]\r\n    df_balance[\"% Removal\"] = (df_balance[\"CO₂ stored (Mt)\"] / df_balance[\"CO₂ emissions (Mt)\"] * 100).round(2)\r\n\r\n    with st.expander(\"\uD83C\uDF0E Total balance - America\"):\r\n        df_balance_ext = df_balance.copy()\r\n\r\n        df_emissions = pd.read_csv(\"data/co2-by-source.csv\")\r\n        df_emissions = df_emissions.melt(\r\n            id_vars=[\"Entity\", \"Year\"],\r\n            value_vars=[\"Coal\", \"Oil\", \"Gas\", \"Flaring\", \"Cement\"],\r\n            var_name=\"Source\",\r\n            value_name=\"Emissions\"\r\n        )\r\n        df_emissions[\"Emissions\"] = df_emissions[\"Emissions\"] / 1e6  # Mt\r\n        df_emissions = df_emissions.rename(columns={\"Emissions\": \"Emissions (Mt)\"})\r\n\r\n        extras = df_emissions[df_emissions[\"Entity\"].isin([\"Argentina\", \"Venezuela\"])][\r\n            [\"Entity\", \"Emissions (Mt)\"]\r\n        ].copy()\r\n\r\n        if not extras.empty:\r\n            extras = extras.rename(columns={\r\n                \"Entity\": \"Country\",\r\n                \"Emissions (Mt)\": \"CO₂ emissions (Mt)\"\r\n            })\r\n            extras[\"Region\"] = \"South America\"\r\n            extras[\"CO₂ stored (Mt)\"] = 0.0\r\n            extras[\"CO₂ not stored (Mt)\"] = extras[\"CO₂ emissions (Mt)\"]\r\n            extras[\"% Removal\"] = 0.0\r\n\r\n            cols = [\"Region\", \"Country\", \"CO₂ emissions (Mt)\", \"CO₂ stored (Mt)\",\r\n                    \"CO₂ not stored (Mt)\", \"% Removal\"]\r\n            df_balance_ext = pd.concat([df_balance_ext, extras[cols]], ignore_index=True)\r\n\r\n        df_america = df_balance_ext.groupby(\"Region\")[[\"CO₂ emissions (Mt)\", \"CO₂ stored (Mt)\", \"CO₂ not stored (Mt)\"]].sum().reset_index()\r\n        df_america[\"% Removal\"] = (df_america[\"CO₂ stored (Mt)\"] / df_america[\"CO₂ emissions (Mt)\"] * 100).round(2)\r\n\r\n        total_emissions = df_america[\"CO₂ emissions (Mt)\"].sum()\r\n        total_stored = df_america[\"CO₂ stored (Mt)\"].sum()\r\n        total_not_stored = df_america[\"CO₂ not stored (Mt)\"].sum()\r\n        total_removal = (total_stored / total_emissions * 100).round(2)\r\n\r\n        america_total = pd.DataFrame({\r\n            \"Region\": [\"America\"],\r\n            \"CO₂ emissions (Mt)\": [total_emissions],\r\n            \"CO₂ stored (Mt)\": [total_stored],\r\n            \"CO₂ not stored (Mt)\": [total_not_stored],\r\n            \"% Removal\": [total_removal]\r\n        })\r\n\r\n        df_america = pd.concat([df_america, america_total], ignore_index=True)\r\n\r\n        st.dataframe(\r\n            df_america[[\"Region\", \"CO₂ emissions (Mt)\", \"CO₂ stored (Mt)\", \"CO₂ not stored (Mt)\", \"% Removal\"]]\r\n            .style.format({\r\n                \"CO₂ emissions (Mt)\": \"{:.2f}\",\r\n                \"CO₂ stored (Mt)\": \"{:.2f}\",\r\n                \"CO₂ not stored (Mt)\": \"{:.2f}\",\r\n                \"% Removal\": \"{:.2f}%\"\r\n            }).set_properties(**{'text-align': 'center'})\r\n        )\r\n\r\n        fig = px.bar(\r\n            df_america,\r\n            x=\"Region\",\r\n            y=[\"CO₂ stored (Mt)\", \"CO₂ not stored (Mt)\"],\r\n            text_auto=True,\r\n            labels={\"value\": \"Total emissions (Mt)\", \"variable\": \"\"}\r\n        )\r\n\r\n        fig.update_layout(\r\n            title_text=\"Emission balance in America\",\r\n            title_x=0.5,\r\n            barmode='stack',\r\n            yaxis_title=\"Total emissions (Mt)\",\r\n            legend=dict(orientation=\"h\", y=-0.2, x=0.5, xanchor=\"center\")\r\n        )\r\n        st.plotly_chart(fig, use_container_width=True)\r\n\r\n    with st.expander(\"\uD83D\uDFE2 Balance - North America\"):\r\n        df_na = df_balance[df_balance[\"Region\"]==\"North America\"].copy()\r\n        st.dataframe(df_na[[\"Country\", \"CO₂ emissions (Mt)\", \"CO₂ stored (Mt)\", \"CO₂ not stored (Mt)\", \"% Removal\"]]\r\n                     .style.format({\"CO₂ emissions (Mt)\":\"{:.2f}\", \"CO₂ stored (Mt)\":\"{:.2f}\", \"CO₂ not stored (Mt)\":\"{:.2f}\", \"% Removal\":\"{:.2f}%\"}).set_properties(**{'text-align':'center'}))\r\n\r\n        st.metric(\"Total % removal North America\", f\"{(df_na['CO₂ stored (Mt)'].sum()/df_na['CO₂ emissions (Mt)'].sum()*100):.2f}%\")\r\n        st.metric(\"Total CO₂ stored\", f\"{df_na['CO₂ stored (Mt)'].sum():.2f} Mt CO₂\")\r\n\r\n        fig = px.bar(df_na, x=\"Country\", y=[\"CO₂ stored (Mt)\", \"CO₂ not stored (Mt)\"],\r\n                     text_auto=True, labels={\"value\": \"Total emissions (Mt)\", \"variable\": \"\"})\r\n        fig.update_layout(title_text=\"Emission balance by country in North America\", title_x=0.5,\r\n                          yaxis_title=\"Total emissions (Mt)\",\r\n                          barmode='stack',\r\n                          legend=dict(orientation=\"h\", y=-0.2, x=0.5, xanchor=\"center\"))\r\n        st.plotly_chart(fig, use_container_width=True)\r\n\r\n    with st.expander(\"\uD83D\uDFE2 Balance - South America\"):\r\n        df_sa = df_balance[df_balance[\"Region\"] == \"South America\"].copy()\r\n\r\n        df_emissions = pd.read_csv(\"data/co2-by-source.csv\")\r\n\r\n        df_emissions = df_emissions.melt(\r\n            id_vars=[\"Entity\", \"Year\"],\r\n            value_vars=[\"Coal\", \"Oil\", \"Gas\", \"Flaring\", \"Cement\"],\r\n            var_name=\"Source\",\r\n            value_name=\"Emissions\"\r\n        )\r\n        df_emissions[\"Emissions\"] = df_emissions[\"Emissions\"] / 1e6\r\n        df_emissions = df_emissions.rename(columns={\"Emissions\": \"Emissions (Mt)\"})\r\n\r\n        extras = df_emissions[df_emissions[\"Entity\"].isin([\"Argentina\", \"Venezuela\"])]\r\n        extras = extras.groupby(\"Entity\", as_index=False)[\"Emissions (Mt)\"].sum()\r\n        extras.rename(columns={\"Entity\": \"Country\", \"Emissions (Mt)\": \"CO₂ emissions (Mt)\"}, inplace=True)\r\n\r\n        extras[\"Region\"] = \"South America\"\r\n        extras[\"CO₂ stored (Mt)\"] = pd.NA\r\n        extras[\"CO₂ not stored (Mt)\"] = pd.NA\r\n        extras[\"% Removal\"] = pd.NA\r\n\r\n        cols = [\"Region\", \"Country\", \"CO₂ emissions (Mt)\", \"CO₂ stored (Mt)\", \"CO₂ not stored (Mt)\", \"% Removal\"]\r\n        extras = extras.reindex(columns=cols)\r\n\r\n        df_sa = pd.concat([df_sa, extras], ignore_index=True)\r\n\r\n        df_sa[\"CO₂ not stored (Mt)\"] = df_sa[\"CO₂ emissions (Mt)\"] - df_sa[\"CO₂ stored (Mt)\"]\r\n        df_sa[\"% Removal\"] = (df_sa[\"CO₂ stored (Mt)\"] / df_sa[\"CO₂ emissions (Mt)\"]) * 100\r\n\r\n        st.dataframe(\r\n            df_sa[[\"Country\", \"CO₂ emissions (Mt)\", \"CO₂ stored (Mt)\", \"CO₂ not stored (Mt)\", \"% Removal\"]]\r\n            .style.format({\r\n                \"CO₂ emissions (Mt)\": \"{:.2f}\",\r\n                \"CO₂ stored (Mt)\": \"{:.2f}\",\r\n                \"CO₂ not stored (Mt)\": \"{:.2f}\",\r\n                \"% Removal\": \"{:.2f}%\"\r\n            }, na_rep=\"—\").set_properties(**{'text-align': 'center'})\r\n        )\r\n\r\n        st.metric(\"Total % removal South America\", f\"{(df_sa['CO₂ stored (Mt)'].fillna(0).sum()/df_sa['CO₂ emissions (Mt)'].sum()*100):.2f}%\")\r\n        st.metric(\"Total CO₂ stored\", f\"{df_sa['CO₂ stored (Mt)'].fillna(0).sum():.2f} Mt CO₂\")\r\n\r\n        fig = px.bar(df_sa, x=\"Country\", y=[\"CO₂ stored (Mt)\", \"CO₂ not stored (Mt)\"],\r\n                     text_auto=True, labels={\"value\": \"Total emissions (Mt)\", \"variable\": \"Type\"})\r\n        fig.update_layout(title_text=\"Emission balance by country in South America\", title_x=0.5,\r\n                          yaxis_title=\"Total emissions (Mt)\",\r\n                          barmode='stack',\r\n                          legend=dict(orientation=\"h\", y=-0.2, x=0.5, xanchor=\"center\"))\r\n        st.plotly_chart(fig, use_container_width=True)\r\n\r\n    with st.expander(\"\uD83C\uDF0D Balance - Country\"):\r\n        selected_countries = st.multiselect(\"Select countries:\", df_balance[\"Country\"].unique())\r\n        df_selected = df_balance[df_balance[\"Country\"].isin(selected_countries)].copy()\r\n        df_selected[\"% Removal\"] = (df_selected[\"CO₂ stored (Mt)\"] / df_selected[\"CO₂ emissions (Mt)\"] * 100).round(2)\r\n\r\n        st.dataframe(\r\n            df_selected[[\"Country\", \"CO₂ emissions (Mt)\", \"CO₂ stored (Mt)\", \"% Removal\"]]\r\n            .style.format({\"CO₂ emissions (Mt)\": \"{:.2f}\", \"CO₂ stored (Mt)\": \"{:.2f}\", \"% Removal\": \"{:.2f}%\"}).set_properties(**{'text-align': 'center'}),\r\n            use_container_width=True\r\n        )\r\n\r\n        fig_country = px.bar(df_selected, x=\"Country\", y=[\"CO₂ emissions (Mt)\", \"CO₂ stored (Mt)\"],\r\n                             text_auto=True, labels={\"value\": \"Total emissions (Mt)\", \"variable\": \"\"},\r\n                             title=\"Emission balance by country\")\r\n        fig_country.update_layout(title_x=0.5, barmode='stack', legend=dict(orientation=\"h\", y=-0.2, x=0.5, xanchor=\"center\"))\r\n        fig_country.update_yaxes(title_text=\"Total emissions (Mt)\", tickformat=\".0f\")\r\n        st.plotly_chart(fig_country, use_container_width=True)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ccs_app.py b/ccs_app.py
--- a/ccs_app.py	(revision 904d8a2df40abcabe7164c6ccb1ad398f95f2ca5)
+++ b/ccs_app.py	(date 1755882562836)
@@ -9,7 +9,7 @@
 
 st.markdown(
     """
-    <h1 style='text-align: center;'>🌎 CCS America </h1>
+    <h1 style='text-align: center;'>🌎 CCS América </h1>
     """,
     unsafe_allow_html=True
 )
@@ -47,17 +47,17 @@
 st.sidebar.title("📑 Menú de Navegación")
 section = st.sidebar.radio(
     "Ir a:",
-    ["📊 CO₂ Emissions Volume",
-     "🛢️ Geological Storage Capacity",
-     "🟢 Carbon balance and emission removal",
+    ["📊 Volumen de emisiones de CO₂",
+     "🏭 Capacidad de almacenamiento geológico",
+     "🟢 Balance de carbono y remoción de emisiones",
+     "📉 Gráficos comparativos de emisiones",
      "🗺️ Mapa interactivo de reservorios"])
 
-if section == "📊 CO₂ Emissions Volume":
-    st.subheader("📊 CO₂ Emissions Volume")
+if section == "📊 Volumen de emisiones de CO₂":
+    st.subheader("📊 Volumen de emisiones de CO₂")
     st.markdown("""
-    Here you can explore the **total emissions volume** by country or region 
-    for a defined year range. Use the filters below to select country, emission source, 
-    and year range.
+    Aquí puede ver el **volumen total de emisiones** por país
+    para un rango de años definido. Use los filtros para seleccionar país, fuente emisora y rango de años.
     """)
 
     df_emisiones = pd.read_csv("data/co2-by-source.csv")
@@ -65,148 +65,105 @@
         id_vars=["Entity", "Year"],
         value_vars=["Coal", "Oil", "Gas", "Flaring", "Cement"],
         var_name="Source",
-        value_name="Emissions"
-    )
+        value_name="Emissions")
 
     df_emisiones["Emissions"] = df_emisiones["Emissions"] / 1e6
     df_emisiones = df_emisiones.rename(columns={"Emissions": "Emissions (Mt)"})
 
-    # Filters
-    mode = st.radio("View emissions by:", ["Country", "Region"])
-    sources = list(df_emisiones["Source"].unique()) + ["All"]
-    source = st.selectbox("Select emission source:", sources)
+    # Filtros
+    modo = st.radio("Ver emisiones por:", ["País", "Región"])
+    fuentes = list(df_emisiones["Source"].unique()) + ["All"]
+    fuente = st.selectbox("Seleccionar fuente emisora:", fuentes)
 
-    year_min = int(df_emisiones["Year"].min())
-    year_max = int(df_emisiones["Year"].max())
-    years = st.slider("Select year range:", year_min, year_max, (year_min, year_max))
+    año_min = int(df_emisiones["Year"].min())
+    año_max = int(df_emisiones["Year"].max())
+    años = st.slider("Seleccionar rango de años:", año_min, año_max, (año_min, año_max))
 
-    if mode == "Country":
-        st.markdown("### 🌎 Emissions by Country")
+    if modo == "País":
+        st.markdown("### 🌎 Emisiones por país")
+        pais = st.selectbox("Seleccionar país:", df_emisiones["Entity"].unique())
 
-        countries = df_emisiones["Entity"].dropna().unique()
-        country = st.selectbox("Select country:", sorted(countries))
+        df_filtrado = df_emisiones[
+            (df_emisiones["Entity"] == pais) &
+            (df_emisiones["Year"] >= años[0]) &
+            (df_emisiones["Year"] <= años[1])]
 
-        df_filtered = df_emisiones[
-            (df_emisiones["Entity"] == country) &
-            (df_emisiones["Year"] >= years[0]) &
-            (df_emisiones["Year"] <= years[1])
-            ]
-
-        if source == "All":
-            df_filtered = df_filtered.groupby(["Entity", "Year"], as_index=False)["Emissions (Mt)"].sum()
-            df_filtered["Source"] = "All"
-            df_filtered = df_filtered[["Entity", "Year", "Source", "Emissions (Mt)"]]
+        if fuente == "All":
+            df_filtrado = df_filtrado.groupby(["Entity", "Year"], as_index=False)["Emissions (Mt)"].sum()
+            df_filtrado["Source"] = "All"
+            df_filtrado = df_filtrado[["Entity", "Year", "Source", "Emissions (Mt)"]]
         else:
-            df_filtered = df_filtered[df_filtered["Source"] == source]
-            df_filtered = df_filtered[["Entity", "Year", "Source", "Emissions (Mt)"]]
+            df_filtrado = df_filtrado[df_filtrado["Source"] == fuente]
+            df_filtrado = df_filtrado[["Entity", "Year", "Source", "Emissions (Mt)"]]
 
-        df_filtered["Year"] = df_filtered["Year"].astype(int)
-        total_country = df_filtered["Emissions (Mt)"].sum()
-        st.subheader(f"Emissions of {country} ({source}) between {years[0]} and {years[1]}")
+        df_filtrado["Year"] = df_filtrado["Year"].astype(int)
+        total_pais = df_filtrado["Emissions (Mt)"].sum()
+        st.subheader(f"Emisiones de {pais} ({fuente}) entre {años[0]} y {años[1]}")
 
         st.dataframe(
-            df_filtered.style.set_properties(**{'text-align': 'center'}), use_container_width=True)
+            df_filtrado.style.set_properties(**{'text-align': 'center'}), use_container_width=True)
 
         st.metric(
-            label=f"Total emissions of {country} ({source})", value=f"{round(total_country, 2)} Mt CO₂")
+            label=f"Total emisiones de {pais} ({fuente})", value=f"{round(total_pais, 2)} Mt CO₂")
 
-    elif mode == "Region":
-        st.markdown("### 🌎 Emissions by Region")
-        regions = {
-            "America": [
-                "United States", "Canada", "Mexico",  # North America
-                "Argentina", "Brazil", "Colombia", "Venezuela", "Ecuador"  # South America
-            ],
-            "North America": ["United States", "Canada", "Mexico"],
-            "South America": ["Argentina", "Brazil", "Colombia", "Venezuela", "Ecuador"]
+    elif modo == "Región":
+        st.markdown("### 🌎 Emisiones por región")
+        regiones = {
+            "Norteamérica": ["United States", "Canada", "Mexico"],
+            "Sudamérica": ["Argentina", "Brazil", "Colombia", "Venezuela", "Ecuador"]
         }
-        region = st.selectbox("Select region:", list(regions.keys()))
-
+        region = st.selectbox("Seleccionar región:", list(regiones.keys()))
         df_region = df_emisiones[
-            (df_emisiones["Entity"].isin(regions[region])) &
-            (df_emisiones["Year"] >= years[0]) &
-            (df_emisiones["Year"] <= years[1])
+            (df_emisiones["Entity"].isin(regiones[region])) &
+            (df_emisiones["Year"] >= años[0]) &
+            (df_emisiones["Year"] <= años[1])
             ]
 
-        if source == "All":
+        if fuente == "All":
             df_region = df_region.groupby(["Year"], as_index=False)["Emissions (Mt)"].sum()
             df_region["Source"] = "All"
         else:
-            df_region = df_region[df_region["Source"] == source]
+            df_region = df_region[df_region["Source"] == fuente]
             df_region = df_region.groupby(["Year"], as_index=False)["Emissions (Mt)"].sum()
-            df_region["Source"] = source
+            df_region["Source"] = fuente
 
         df_region = df_region[["Source", "Year", "Emissions (Mt)"]]
         df_region["Year"] = df_region["Year"].astype(int)
 
         total_region = df_region["Emissions (Mt)"].sum()
 
-        st.subheader(f"Emissions of {region} ({source}) between {years[0]} and {years[1]}")
+        st.subheader(f"Emisiones de {region} ({fuente}) entre {años[0]} y {años[1]}")
         st.dataframe(df_region.style.set_properties(**{'text-align': 'center'}), use_container_width=True)
-        st.metric(label=f"Total emissions of {region} ({source})", value=f"{round(total_region, 2)} Mt CO₂")
-
-    elif mode == "Region":
-        st.markdown("### 🌎 Emissions by Region")
-        regions = {
-            "America": [
-                "United States", "Canada", "Mexico",  # North America
-                "Argentina", "Brazil", "Colombia", "Venezuela", "Ecuador"  # South America
-            ],
-            "North America": ["United States", "Canada", "Mexico"],
-            "South America": ["Argentina", "Brazil", "Colombia", "Venezuela", "Ecuador"]
-        }
-        region = st.selectbox("Select region:", list(regions.keys()))
-
-        df_region = df_emisiones[
-            (df_emisiones["Entity"].isin(regions[region])) &
-            (df_emisiones["Year"] >= years[0]) &
-            (df_emisiones["Year"] <= years[1])
-            ]
-
-        if source == "All":
-            df_region = df_region.groupby(["Year"], as_index=False)["Emissions (Mt)"].sum()
-            df_region["Source"] = "All"
-        else:
-            df_region = df_region[df_region["Source"] == source]
-            df_region = df_region.groupby(["Year"], as_index=False)["Emissions (Mt)"].sum()
-            df_region["Source"] = source
-
-        df_region = df_region[["Source", "Year", "Emissions (Mt)"]]
-        df_region["Year"] = df_region["Year"].astype(int)
+        st.metric(label=f"Total emisiones de {region} ({fuente})", value=f"{round(total_region, 2)} Mt CO₂")
 
-        total_region = df_region["Emissions (Mt)"].sum()
-
-        st.subheader(f"Emissions of {region} ({source}) between {years[0]} and {years[1]}")
-        st.dataframe(df_region.style.set_properties(**{'text-align': 'center'}), use_container_width=True)
-        st.metric(label=f"Total emissions of {region} ({source})", value=f"{round(total_region, 2)} Mt CO₂")
-
-elif section == "🛢️ Geological Storage Capacity":
-    st.subheader("🛢️ Geological Storage Capacity")
+elif section == "🏭 Capacidad de almacenamiento geológico":
+    st.subheader("🏭 Capacidad de almacenamiento geológico")
     st.markdown("""
-    Here you can explore the **CO₂ geological storage capacity**.  
-    First, select a **region**, then one or more **countries** from that region, and finally the **reservoirs**.
+    Esta sección muestra la **cantidad en millones de toneladas (Mt) de CO₂ que pueden ser almacenadas** en los reservorios seleccionados,
+    siguiendo la metodología de **Bachu**. 
+    Use los filtros para seleccionar países y observar la capacidad de almacenamiento de sus reservorios.
     """)
 
-    df_reservoirs = pd.DataFrame({
-        "Region": [
-            "North America", "North America", "North America", "North America", "North America", "North America",
-            "North America", "North America",
-            "North America", "North America", "North America", "North America", "North America", "North America",
-            "North America",
-            "North America", "North America",
-            "South America", "South America", "South America",
-            "South America", "South America", "South America",
-            "South America", "South America", "South America", "South America", "South America"
+    df_reservorios = pd.DataFrame({
+        "Región": [
+            "Norteamérica", "Norteamérica", "Norteamérica", "Norteamérica", "Norteamérica", "Norteamérica",
+            "Norteamérica", "Norteamérica",
+            "Norteamérica", "Norteamérica", "Norteamérica", "Norteamérica", "Norteamérica", "Norteamérica",
+            "Norteamérica",
+            "Norteamérica", "Norteamérica",
+            "Sudamérica", "Sudamérica", "Sudamérica",
+            "Sudamérica", "Sudamérica", "Sudamérica",
+            "Sudamérica", "Sudamérica", "Sudamérica", "Sudamérica", "Sudamérica"
         ],
-        "Country": [
-            "Canada", "Canada", "Canada", "Canada", "Canada", "Canada", "Canada", "Canada",
-            "USA", "USA", "USA", "USA", "USA", "USA", "USA",
-            "Mexico", "Mexico",
-            "Brazil", "Brazil", "Brazil",
+        "País": [
+            "Canadá", "Canadá", "Canadá", "Canadá", "Canadá", "Canadá", "Canadá", "Canadá",
+            "EE.UU.", "EE.UU.", "EE.UU.", "EE.UU.", "EE.UU.", "EE.UU.", "EE.UU.",
+            "México", "México",
+            "Brasil", "Brasil", "Brasil",
             "Colombia", "Colombia", "Colombia",
             "Ecuador", "Ecuador", "Ecuador", "Ecuador", "Ecuador"
         ],
-        "Reservoir": [
+        "Reservorio": [
             "Leduc Formation (Clive Field)", "Midale Formation (Weyburn Field)", "Viking Formation (Chigwell Field)", "Leduc Formation (Redwater Field)", "Viking Formation (Joffre Field)", "Cardium Formation (Pembina Field)",
             "Basal Cambrian Sand (Quest)", "Deadwood Formation (Aquistore)",
             "Frio Formation (West Ranch Field)", "Weber Sandstone (Rangely Field)", "Muddy Formation (Bell Creek Field)", "Morrow Formation (Farnsworth Field)", "Mt. Simon Sandstone (Illinois Basin)", "Tuscaloosa Formation (Cranfield Field)",
@@ -216,7 +173,7 @@
             "Siamana Formation (Guajira Basin)", "Jimol Formation (Guajira Basin)", "Jimol Formation (Sinu Basin)",
             "Hollín Superior (Sacha Field)", "Hollín Superior (Lago Agrio Field)", "U Inferior (Parahuacu Field)", "Napo T (Sacha Field)", "T Principal (Yanaquincha Este Field)"
         ],
-        "Capacity (Mt)": [
+        "Capacidad (Mt)": [
             18.38, 125.13, 9.33, 79.33, 35.35, 861.54, 65.05, 67.06,
             47.79, 95.45, 13.0, 28.1, 393.15, 109.52, 753.19,
             823.39, 275.49,
@@ -224,7 +181,7 @@
             682.73, 359.42, 136.45,
             58.73, 3.63, 2.56, 17.35, 5.41
         ],
-        "Depth (m)": [
+        "Profundidad (m)": [
             1832, 1450, 1385.6, 984, 1400, 1447, 2330, 3200,
             1752.6, 1980, 1360, 2330, 3060, 1690, 2865,
             3600, 2900,
@@ -232,7 +189,7 @@
             1701, 1800, 3287,
             2735.58, 3040.38, 2649, 2671.58, 3048
         ],
-        "Thickness (m)": [
+        "Espesor (m)": [
             180, 20, 30, 250, 20, 32, 47, 38.6,
             27, 58, 8, 25, 28, 156, 143,
             400, 154,
@@ -240,7 +197,7 @@
             12, 37, 11,
             15.24, 5.48, 12.92, 10.21, 27.74
         ],
-        "Porosity (%)": [
+        "Porosidad (%)": [
             8, 26, 13, 12, 13, 16.4, 17, 15,
             30, 58, 25, 23, 25.5, 21, 25,
             14, 9,
@@ -248,237 +205,154 @@
             17.5, 21, 24,
             14, 13, 11.9, 16, 15
         ],
-        "Permeability (mD)": [
+        "Permeabilidad (mD)": [
             95.02, 300, 72.89, 100, 349, 21.4, 1000, 20,
             900, 8, 900, 300, 100, 28, 300,
             100, 100,
             88.7, 122.6, 88.7,
             200, 250, 200,
             70, 70.64, 384, 200, 356
-        ]
-    })
+        ]})
 
-    region = st.selectbox("🌎 Select region:", df_reservoirs["Region"].unique())
-    df_region = df_reservoirs[df_reservoirs["Region"] == region]
-    countries = st.multiselect("🏳️ Select country/countries:", df_region["Country"].unique())
+    region = st.selectbox("🌎 Seleccionar región:", df_reservorios["Región"].unique())
+    df_region = df_reservorios[df_reservorios["Región"] == region]
 
-    if countries:
-        df_countries = df_region[df_region["Country"].isin(countries)]
-        df_countries["Reservoir_Display"] = df_countries["Country"] + " - " + df_countries["Reservoir"]
-        selected_display_reservoirs = st.multiselect(
-            "🛢️ Select reservoir(s):",
-            df_countries["Reservoir_Display"].unique()
-        )
+    pais = st.selectbox("🏳️ Seleccionar país:", df_region["País"].unique())
+    df_pais = df_region[df_region["País"] == pais]
 
-        if selected_display_reservoirs:
-            df_selected = df_countries[df_countries["Reservoir_Display"].isin(selected_display_reservoirs)]
-            st.subheader("🛢️ Selected Reservoir Data")
-            st.dataframe(
-                df_selected[
-                    ["Region", "Country", "Reservoir", "Capacity (Mt)", "Depth (m)", "Thickness (m)", "Porosity (%)",
-                     "Permeability (mD)"]]
-                .style.format({
-                    "Capacity (Mt)": "{:.2f}",
-                    "Depth (m)": "{:.2f}",
-                    "Thickness (m)": "{:.2f}",
-                    "Porosity (%)": "{:.2f}",
-                    "Permeability (mD)": "{:.2f}"
-                }).set_properties(**{'text-align': 'center'}),
-                use_container_width=True
-            )
+    reservorio = st.selectbox("🛢️ Seleccionar reservorio:", df_pais["Reservorio"].unique())
+    df_seleccionado = df_pais[df_pais["Reservorio"] == reservorio]
+
+    st.subheader(f"🛢️ Reservorio: {reservorio} ({pais})")
+    st.dataframe(
+        df_seleccionado.style.format({
+            "Capacidad (Mt)": "{:.2f}",
+            "Profundidad (m)": "{:.2f}",
+            "Espesor (m)": "{:.2f}",
+            "Porosidad (%)": "{:.2f}",
+            "Permeabilidad (mD)": "{:.2f}"
+        }).set_properties(**{'text-align': 'center'}),
+        use_container_width=True
+    )
 
-            if len(selected_display_reservoirs) == 1:
-                st.metric(label="Selected reservoir capacity",
-                          value=f"{df_selected['Capacity (Mt)'].values[0]:.2f} Mt CO₂")
+    st.metric(label="Capacidad del reservorio seleccionado",
+              value=f"{df_seleccionado['Capacidad (Mt)'].values[0]:.2f} Mt CO₂")
 
-            st.metric(label="Total capacity of selected reservoir(s)",
-                      value=f"{df_selected['Capacity (Mt)'].sum():.2f} Mt CO₂")
-            st.metric(label=f"Total capacity in {region}",
-                      value=f"{df_region['Capacity (Mt)'].sum():.2f} Mt CO₂")
+    st.metric(label=f"Capacidad total en {pais}",
+              value=f"{df_pais['Capacidad (Mt)'].sum():.2f} Mt CO₂")
 
-            fig = px.bar(df_selected, x="Reservoir", y="Capacity (Mt)",
-                         color="Country", text="Capacity (Mt)",
-                         title=f"📊 Capacity per selected reservoir(s)")
-            st.plotly_chart(fig, use_container_width=True)
+    st.metric(label=f"Capacidad total en {region}",
+              value=f"{df_region['Capacidad (Mt)'].sum():.2f} Mt CO₂")
+
+    fig = px.bar(df_pais, x="Reservorio", y="Capacidad (Mt)",
+                 color="Capacidad (Mt)", text="Capacidad (Mt)",
+                 title=f"📊 Capacidad por reservorio en {pais}")
+    st.plotly_chart(fig, use_container_width=True)
 
-elif section == "🟢 Carbon balance and emission removal":
-    st.subheader("🟢 Carbon balance and emission removal")
+elif section == "🟢 Balance de carbono y remoción de emisiones":
+    st.subheader("🟢 Balance de carbono y remoción de emisiones")
     st.markdown("""
-        Visualize the *carbon balance* and the *% of emission removal* at different levels:
-        - America
-        - North America
-        - South America
-        - Country
+        Visualice el *balance de carbono* y el *% de remoción de emisiones* por diferentes niveles:
+        - América
+        - Norteamérica
+        - Sudamérica
+        - País
     """)
 
     df_balance = pd.DataFrame({
-        "Region": ["North America", "North America", "North America", "South America", "South America", "South America"],
-        "Country": ["Canada", "USA", "Mexico", "Brazil", "Colombia", "Ecuador"],
-        "CO₂ emissions (Mt)": [18354.93, 186820.53, 14502.65, 13050.66, 2477.66, 1038.67],
-        "CO₂ stored (Mt)": [1261.17, 1440.20, 1098.88, 2646.87, 1178.60, 87.68]
+        "Región": ["Norteamérica", "Norteamérica", "Norteamérica", "Sudamérica", "Sudamérica", "Sudamérica"],
+        "País": ["Canadá", "EE.UU.", "México", "Brasil", "Colombia", "Ecuador"],
+        "Emisiones (Mt)": [18354.93, 186820.53, 14502.65, 13050.66, 2477.66, 1038.67],
+        "CO₂ almacenado (Mt)": [1261.17, 1440.20, 1098.88, 2646.87, 1178.60, 87.68]
     })
-
-    df_balance["CO₂ not stored (Mt)"] = df_balance["CO₂ emissions (Mt)"] - df_balance["CO₂ stored (Mt)"]
-    df_balance["% Removal"] = (df_balance["CO₂ stored (Mt)"] / df_balance["CO₂ emissions (Mt)"] * 100).round(2)
-
-    with st.expander("🌎 Total balance - America"):
-        df_balance_ext = df_balance.copy()
-
-        df_emissions = pd.read_csv("data/co2-by-source.csv")
-        df_emissions = df_emissions.melt(
-            id_vars=["Entity", "Year"],
-            value_vars=["Coal", "Oil", "Gas", "Flaring", "Cement"],
-            var_name="Source",
-            value_name="Emissions"
-        )
-        df_emissions["Emissions"] = df_emissions["Emissions"] / 1e6  # Mt
-        df_emissions = df_emissions.rename(columns={"Emissions": "Emissions (Mt)"})
-
-        extras = df_emissions[df_emissions["Entity"].isin(["Argentina", "Venezuela"])][
-            ["Entity", "Emissions (Mt)"]
-        ].copy()
-
-        if not extras.empty:
-            extras = extras.rename(columns={
-                "Entity": "Country",
-                "Emissions (Mt)": "CO₂ emissions (Mt)"
-            })
-            extras["Region"] = "South America"
-            extras["CO₂ stored (Mt)"] = 0.0
-            extras["CO₂ not stored (Mt)"] = extras["CO₂ emissions (Mt)"]
-            extras["% Removal"] = 0.0
 
-            cols = ["Region", "Country", "CO₂ emissions (Mt)", "CO₂ stored (Mt)",
-                    "CO₂ not stored (Mt)", "% Removal"]
-            df_balance_ext = pd.concat([df_balance_ext, extras[cols]], ignore_index=True)
+    # Agregar columna de emisiones no almacenadas y % remoción
+    df_balance["CO₂ no almacenado (Mt)"] = df_balance["Emisiones (Mt)"] - df_balance["CO₂ almacenado (Mt)"]
+    df_balance["% Remoción"] = (df_balance["CO₂ almacenado (Mt)"] / df_balance["Emisiones (Mt)"] * 100).round(2)
 
-        df_america = df_balance_ext.groupby("Region")[["CO₂ emissions (Mt)", "CO₂ stored (Mt)", "CO₂ not stored (Mt)"]].sum().reset_index()
-        df_america["% Removal"] = (df_america["CO₂ stored (Mt)"] / df_america["CO₂ emissions (Mt)"] * 100).round(2)
-
-        total_emissions = df_america["CO₂ emissions (Mt)"].sum()
-        total_stored = df_america["CO₂ stored (Mt)"].sum()
-        total_not_stored = df_america["CO₂ not stored (Mt)"].sum()
-        total_removal = (total_stored / total_emissions * 100).round(2)
-
-        america_total = pd.DataFrame({
-            "Region": ["America"],
-            "CO₂ emissions (Mt)": [total_emissions],
-            "CO₂ stored (Mt)": [total_stored],
-            "CO₂ not stored (Mt)": [total_not_stored],
-            "% Removal": [total_removal]
-        })
-
-        df_america = pd.concat([df_america, america_total], ignore_index=True)
+    # --- Balance total América ---
+    with st.expander("🌎 Balance total América"):
+        df_america = df_balance.groupby("Región")[["Emisiones (Mt)", "CO₂ almacenado (Mt)", "CO₂ no almacenado (Mt)"]].sum().reset_index()
+        df_america["% Remoción"] = (df_america["CO₂ almacenado (Mt)"] / df_america["Emisiones (Mt)"] * 100).round(2)
 
         st.dataframe(
-            df_america[["Region", "CO₂ emissions (Mt)", "CO₂ stored (Mt)", "CO₂ not stored (Mt)", "% Removal"]]
+            df_america[["Región", "Emisiones (Mt)", "CO₂ almacenado (Mt)", "CO₂ no almacenado (Mt)", "% Remoción"]]
             .style.format({
-                "CO₂ emissions (Mt)": "{:.2f}",
-                "CO₂ stored (Mt)": "{:.2f}",
-                "CO₂ not stored (Mt)": "{:.2f}",
-                "% Removal": "{:.2f}%"
-            }).set_properties(**{'text-align': 'center'})
-        )
+                "Emisiones (Mt)": "{:.2f}",
+                "CO₂ almacenado (Mt)": "{:.2f}",
+                "CO₂ no almacenado (Mt)": "{:.2f}",
+                "% Remoción": "{:.2f}%"
+            }).set_properties(**{'text-align': 'center'}))
 
-        fig = px.bar(
-            df_america,
-            x="Region",
-            y=["CO₂ stored (Mt)", "CO₂ not stored (Mt)"],
-            text_auto=True,
-            labels={"value": "Total emissions (Mt)", "variable": ""}
-        )
-
-        fig.update_layout(
-            title_text="Emission balance in America",
-            title_x=0.5,
-            barmode='stack',
-            yaxis_title="Total emissions (Mt)",
-            legend=dict(orientation="h", y=-0.2, x=0.5, xanchor="center")
-        )
+        fig = px.bar(df_america, x="Región", y=["CO₂ almacenado (Mt)", "CO₂ no almacenado (Mt)"],
+                     text_auto=True, labels={"value": "Emisiones totales (Mt)", "variable": ""})
+        fig.update_layout(title_text="Balance de emisiones por región", title_x=0.5,
+                          barmode='stack',
+                          yaxis_title="Emisiones totales (Mt)",
+                          legend=dict(orientation="h", y=-0.2, x=0.5, xanchor="center"))
         st.plotly_chart(fig, use_container_width=True)
 
-    with st.expander("🟢 Balance - North America"):
-        df_na = df_balance[df_balance["Region"]=="North America"].copy()
-        st.dataframe(df_na[["Country", "CO₂ emissions (Mt)", "CO₂ stored (Mt)", "CO₂ not stored (Mt)", "% Removal"]]
-                     .style.format({"CO₂ emissions (Mt)":"{:.2f}", "CO₂ stored (Mt)":"{:.2f}", "CO₂ not stored (Mt)":"{:.2f}", "% Removal":"{:.2f}%"}).set_properties(**{'text-align':'center'}))
+    # --- Balance Norteamérica ---
+    with st.expander("🟢 Balance por Norteamérica"):
+        df_na = df_balance[df_balance["Región"]=="Norteamérica"].copy()
+        df_na_total = df_na[["Emisiones (Mt)", "CO₂ almacenado (Mt)", "CO₂ no almacenado (Mt)"]].sum()
+        st.dataframe(df_na[["País", "Emisiones (Mt)", "CO₂ almacenado (Mt)", "CO₂ no almacenado (Mt)", "% Remoción"]]
+                     .style.format({"Emisiones (Mt)":"{:.2f}", "CO₂ almacenado (Mt)":"{:.2f}", "CO₂ no almacenado (Mt)":"{:.2f}", "% Remoción":"{:.2f}%"}).set_properties(**{'text-align':'center'}))
 
-        st.metric("Total % removal North America", f"{(df_na['CO₂ stored (Mt)'].sum()/df_na['CO₂ emissions (Mt)'].sum()*100):.2f}%")
-        st.metric("Total CO₂ stored", f"{df_na['CO₂ stored (Mt)'].sum():.2f} Mt CO₂")
+        st.metric("Total % remoción Norteamérica", f"{(df_na['CO₂ almacenado (Mt)'].sum()/df_na['Emisiones (Mt)'].sum()*100):.2f}%")
+        st.metric("CO₂ total almacenado", f"{df_na['CO₂ almacenado (Mt)'].sum():.2f} Mt CO₂")
 
-        fig = px.bar(df_na, x="Country", y=["CO₂ stored (Mt)", "CO₂ not stored (Mt)"],
-                     text_auto=True, labels={"value": "Total emissions (Mt)", "variable": ""})
-        fig.update_layout(title_text="Emission balance by country in North America", title_x=0.5,
-                          yaxis_title="Total emissions (Mt)",
+        fig = px.bar(df_na, x="País", y=["CO₂ almacenado (Mt)", "CO₂ no almacenado (Mt)"],
+                     text_auto=True, labels={"value": "Emisiones totales (Mt)", "variable": ""})
+        fig.update_layout(title_text="Balance de emisiones por país en Norteamérica", title_x=0.5,
+                          yaxis_title="Emisiones totales (Mt)",
                           barmode='stack',
                           legend=dict(orientation="h", y=-0.2, x=0.5, xanchor="center"))
         st.plotly_chart(fig, use_container_width=True)
 
-    with st.expander("🟢 Balance - South America"):
-        df_sa = df_balance[df_balance["Region"] == "South America"].copy()
-
-        df_emissions = pd.read_csv("data/co2-by-source.csv")
-
-        df_emissions = df_emissions.melt(
-            id_vars=["Entity", "Year"],
-            value_vars=["Coal", "Oil", "Gas", "Flaring", "Cement"],
-            var_name="Source",
-            value_name="Emissions"
-        )
-        df_emissions["Emissions"] = df_emissions["Emissions"] / 1e6
-        df_emissions = df_emissions.rename(columns={"Emissions": "Emissions (Mt)"})
-
-        extras = df_emissions[df_emissions["Entity"].isin(["Argentina", "Venezuela"])]
-        extras = extras.groupby("Entity", as_index=False)["Emissions (Mt)"].sum()
-        extras.rename(columns={"Entity": "Country", "Emissions (Mt)": "CO₂ emissions (Mt)"}, inplace=True)
-
-        extras["Region"] = "South America"
-        extras["CO₂ stored (Mt)"] = pd.NA
-        extras["CO₂ not stored (Mt)"] = pd.NA
-        extras["% Removal"] = pd.NA
-
-        cols = ["Region", "Country", "CO₂ emissions (Mt)", "CO₂ stored (Mt)", "CO₂ not stored (Mt)", "% Removal"]
-        extras = extras.reindex(columns=cols)
-
-        df_sa = pd.concat([df_sa, extras], ignore_index=True)
-
-        df_sa["CO₂ not stored (Mt)"] = df_sa["CO₂ emissions (Mt)"] - df_sa["CO₂ stored (Mt)"]
-        df_sa["% Removal"] = (df_sa["CO₂ stored (Mt)"] / df_sa["CO₂ emissions (Mt)"]) * 100
+    # --- Balance Sudamérica ---
+    with st.expander("🟢 Balance por Sudamérica"):
+        df_sa = df_balance[df_balance["Región"]=="Sudamérica"].copy()
+        st.dataframe(df_sa[["País", "Emisiones (Mt)", "CO₂ almacenado (Mt)", "CO₂ no almacenado (Mt)", "% Remoción"]]
+                     .style.format({"Emisiones (Mt)":"{:.2f}", "CO₂ almacenado (Mt)":"{:.2f}", "CO₂ no almacenado (Mt)":"{:.2f}", "% Remoción":"{:.2f}%"}).set_properties(**{'text-align':'center'}))
 
-        st.dataframe(
-            df_sa[["Country", "CO₂ emissions (Mt)", "CO₂ stored (Mt)", "CO₂ not stored (Mt)", "% Removal"]]
-            .style.format({
-                "CO₂ emissions (Mt)": "{:.2f}",
-                "CO₂ stored (Mt)": "{:.2f}",
-                "CO₂ not stored (Mt)": "{:.2f}",
-                "% Removal": "{:.2f}%"
-            }, na_rep="—").set_properties(**{'text-align': 'center'})
-        )
+        st.metric("Total % remoción Sudamérica", f"{(df_sa['CO₂ almacenado (Mt)'].sum()/df_sa['Emisiones (Mt)'].sum()*100):.2f}%")
+        st.metric("CO₂ total almacenado", f"{df_sa['CO₂ almacenado (Mt)'].sum():.2f} Mt CO₂")
 
-        st.metric("Total % removal South America", f"{(df_sa['CO₂ stored (Mt)'].fillna(0).sum()/df_sa['CO₂ emissions (Mt)'].sum()*100):.2f}%")
-        st.metric("Total CO₂ stored", f"{df_sa['CO₂ stored (Mt)'].fillna(0).sum():.2f} Mt CO₂")
-
-        fig = px.bar(df_sa, x="Country", y=["CO₂ stored (Mt)", "CO₂ not stored (Mt)"],
-                     text_auto=True, labels={"value": "Total emissions (Mt)", "variable": "Type"})
-        fig.update_layout(title_text="Emission balance by country in South America", title_x=0.5,
-                          yaxis_title="Total emissions (Mt)",
+        fig = px.bar(df_sa, x="País", y=["CO₂ almacenado (Mt)", "CO₂ no almacenado (Mt)"],
+                     text_auto=True, labels={"value": "Emisiones totales (Mt)", "variable": "Tipo"})
+        fig.update_layout(title_text="Balance de emisiones por país en Sudamérica", title_x=0.5,
+                          yaxis_title="Emisiones totales (Mt)",
                           barmode='stack',
                           legend=dict(orientation="h", y=-0.2, x=0.5, xanchor="center"))
         st.plotly_chart(fig, use_container_width=True)
 
-    with st.expander("🌍 Balance - Country"):
-        selected_countries = st.multiselect("Select countries:", df_balance["Country"].unique())
-        df_selected = df_balance[df_balance["Country"].isin(selected_countries)].copy()
-        df_selected["% Removal"] = (df_selected["CO₂ stored (Mt)"] / df_selected["CO₂ emissions (Mt)"] * 100).round(2)
+    # --- Balance por país ---
+    with st.expander("🌍 Balance por país"):
+        selected_paises = st.multiselect("Seleccionar países:", df_balance["País"].unique(),
+                                         default=df_balance["País"].unique())
+        df_selected = df_balance[df_balance["País"].isin(selected_paises)].copy()
+        df_selected["% Remoción"] = (df_selected["CO₂ almacenado (Mt)"] / df_selected["Emisiones (Mt)"] * 100).round(2)
 
         st.dataframe(
-            df_selected[["Country", "CO₂ emissions (Mt)", "CO₂ stored (Mt)", "% Removal"]]
-            .style.format({"CO₂ emissions (Mt)": "{:.2f}", "CO₂ stored (Mt)": "{:.2f}", "% Removal": "{:.2f}%"}).set_properties(**{'text-align': 'center'}),
+            df_selected[["País", "Emisiones (Mt)", "CO₂ almacenado (Mt)", "% Remoción"]]
+            .style.format({"Emisiones (Mt)": "{:.2f}", "CO₂ almacenado (Mt)": "{:.2f}", "% Remoción": "{:.2f}%"})
+            .set_properties(**{'text-align': 'center'}),
             use_container_width=True
         )
 
-        fig_country = px.bar(df_selected, x="Country", y=["CO₂ emissions (Mt)", "CO₂ stored (Mt)"],
-                             text_auto=True, labels={"value": "Total emissions (Mt)", "variable": ""},
-                             title="Emission balance by country")
-        fig_country.update_layout(title_x=0.5, barmode='stack', legend=dict(orientation="h", y=-0.2, x=0.5, xanchor="center"))
-        fig_country.update_yaxes(title_text="Total emissions (Mt)", tickformat=".0f")
-        st.plotly_chart(fig_country, use_container_width=True)
\ No newline at end of file
+        fig_pais = px.bar(
+            df_selected,
+            x="País",
+            y=["Emisiones (Mt)", "CO₂ almacenado (Mt)"],
+            text_auto=True,
+            labels={"value": "Emisiones totales (Mt)", "variable": ""},
+            title="Balance de emisiones por país"
+        )
+        fig_pais.update_layout(
+            title_x=0.5,
+            barmode='stack',
+            legend=dict(orientation="h", y=-0.2, x=0.5, xanchor="center")
+        )
+        fig_pais.update_yaxes(title_text="Emisiones totales (Mt)", tickformat=".0f")
+        st.plotly_chart(fig_pais, use_container_width=True)
